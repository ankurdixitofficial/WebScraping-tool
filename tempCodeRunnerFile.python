import tkinter as tk
from tkinter import ttk, messagebox
import random
import time
import threading

# Tkinter window setup
root = tk.Tk()
root.title("Sorting Algorithm Visualizer")
root.geometry("800x600")

# Variables for storing the array and speed
data = []
speed = 0.1
algo_selected = "Bubble Sort"
is_sorting = False
stop_sorting = False

# Function to generate random array
def generate_array():
    global data
    data = [random.randint(1, 100) for _ in range(50)]
    draw_bars(data, ['blue' for _ in range(len(data))])

# Function to draw the bars representing the array
def draw_bars(data, colorArray):
    canvas.delete("all")
    c_width = 700
    c_height = 400
    x_width = c_width / (len(data) + 1)
    offset = 30
    spacing = 10
    normalized_data = [i / max(data) for i in data]
    for i, height in enumerate(normalized_data):
        x0 = i * x_width + offset + spacing
        y0 = c_height - height * 350
        x1 = (i + 1) * x_width + offset
        y1 = c_height
        canvas.create_rectangle(x0, y0, x1, y1, fill=colorArray[i])
    root.update_idletasks()

# Sorting Algorithms

def bubble_sort():
    global data, is_sorting, stop_sorting
    for i in range(len(data) - 1):
        for j in range(len(data) - 1 - i):
            if stop_sorting:
                return
            if data[j] > data[j + 1]:
                data[j], data[j + 1] = data[j + 1], data[j]
                draw_bars(data, ['green' if x == j or x == j + 1 else 'blue' for x in range(len(data))])
                time.sleep(speed)

def insertion_sort():
    global data, is_sorting, stop_sorting
    for i in range(1, len(data)):
        if stop_sorting:
            return
        key = data[i]
        j = i - 1
        while j >= 0 and key < data[j]:
            data[j + 1] = data[j]
            j -= 1
            draw_bars(data, ['green' if x == j or x == i else 'blue' for x in range(len(data))])
            time.sleep(speed)
        data[j + 1] = key
        draw_bars(data, ['green' if x == j + 1 else 'blue' for x in range(len(data))])

# Start sorting with threading
def start_sorting():
    global is_sorting, stop_sorting
    if is_sorting:
        return
    is_sorting = True
    stop_sorting = False
    if algo_selected == "Bubble Sort":
        threading.Thread(target=bubble_sort).start()
    elif algo_selected == "Insertion Sort":
        threading.Thread(target=insertion_sort).start()

# Stop Sorting
def stop_sort():
    global stop_sorting, is_sorting
    stop_sorting = True
    is_sorting = False

# Custom Array Input
def custom_array():
    global data
    array_str = array_input.get()
    try:
        data = list(map(int, array_str.split(',')))
        if len(data) < 2:
            raise ValueError
        draw_bars(data, ['blue' for _ in range(len(data))])
    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter a valid array of integers separated by commas (e.g. 3,5,7).")

# Control Panel Frame
control_frame = ttk.Frame(root, padding=(10, 5))
control_frame.place(relx=0.5, rely=0.1, anchor="n")

# Buttons and Speed Scale
generate_button = tk.Button(control_frame, text="Generate Array", command=generate_array, bg="lightblue")
generate_button.grid(row=0, column=0, padx=5)

sort_button = tk.Button(control_frame, text="Start Sorting", command=start_sorting, bg="lightgreen")
sort_button.grid(row=0, column=1, padx=5)

stop_button = tk.Button(control_frame, text="Stop Sorting", command=stop_sort, bg="red")
stop_button.grid(row=0, column=2, padx=5)

# Speed Scale
speed_scale = tk.Scale(control_frame, from_=0.1, to=2.0, resolution=0.1, orient=tk.HORIZONTAL, label="Sorting Speed")
speed_scale.grid(row=0, column=3, padx=5)

# Dropdown for algorithm selection
algo_choice = tk.StringVar()
algo_menu = ttk.Combobox(control_frame, textvariable=algo_choice, values=["Bubble Sort", "Insertion Sort"])
algo_menu.grid(row=0, column=4, padx=5)
algo_menu.current(0)

def set_algo(event):
    global algo_selected
    algo_selected = algo_menu.get()

algo_menu.bind("<<ComboboxSelected>>", set_algo)

# Input for Custom Array
array_label = tk.Label(control_frame, text="Custom Array (Comma-separated):")
array_label.grid(row=1, column=0, padx=5)

array_input = tk.Entry(control_frame)
array_input.grid(row=1, column=1, padx=5, columnspan=2)

array_button = tk.Button(control_frame, text="Set Array", command=custom_array, bg="lightblue")
array_button.grid(row=1, column=3, padx=5)

# Canvas for bars
canvas = tk.Canvas(root, width=700, height=400, bg="white")
canvas.place(relx=0.5, rely=0.3, anchor="n")

root.mainloop()
